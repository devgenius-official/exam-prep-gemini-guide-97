
import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Target, Clock, Play, Pause, RotateCcw } from 'lucide-react';
import { toast } from 'sonner';
import { ThemeToggle } from './ThemeToggle';
import RobotTeacher from './RobotTeacher';

interface LearningData {
  examDate: Date;
  className: string;
  subject: string;
}

interface AILearningInterfaceProps {
  username: string;
  learningData: LearningData;
}

interface QuizQuestion {
  question: string;
  options: string[];
  correctAnswer: number;
  explanation: string;
}

const AILearningInterface = ({ username, learningData }: AILearningInterfaceProps) => {
  const [currentQuiz, setCurrentQuiz] = useState<QuizQuestion | null>(null);
  const [showQuizAnswer, setShowQuizAnswer] = useState(false);
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);
  const [studyTime, setStudyTime] = useState(0);
  const [isTimerRunning, setIsTimerRunning] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  // Study Timer Logic
  useEffect(() => {
    let interval: NodeJS.Timeout;
    if (isTimerRunning) {
      interval = setInterval(() => {
        setStudyTime(prev => prev + 1);
      }, 1000);
    }
    return () => clearInterval(interval);
  }, [isTimerRunning]);

  const formatTime = (seconds: number) => {
    const hrs = Math.floor(seconds / 3600);
    const mins = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    return `${hrs.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  const toggleTimer = () => {
    setIsTimerRunning(!isTimerRunning);
  };

  const resetTimer = () => {
    setStudyTime(0);
    setIsTimerRunning(false);
  };

  const callGeminiAPI = async (message: string, requestType: 'quiz' = 'quiz') => {
    const API_KEY = 'AIzaSyBPWD8VGE4EUqGzsdfP-nLfDV0JNOHdBoM';
    
    try {
      let prompt = `Generate a single multiple choice question for ${learningData.subject} at ${learningData.className} level. 

Format your response as JSON with this exact structure:
{
  "question": "Your question here",
  "options": ["Option A", "Option B", "Option C", "Option D"],
  "correctAnswer": 0,
  "explanation": "Detailed explanation of why this is correct and why others are wrong"
}

Topic focus: ${message}
Make it challenging but appropriate for the level.`;

      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=${API_KEY}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: prompt
            }]
          }],
          generationConfig: {
            temperature: 0.5,
            maxOutputTokens: 1000,
          }
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to get response from Gemini API');
      }

      const data = await response.json();
      return data.candidates[0].content.parts[0].text;
    } catch (error) {
      console.error('Error calling Gemini API:', error);
      return '{"error": "Failed to generate quiz question"}';
    }
  };

  const generateQuiz = async (topic: string = '') => {
    setIsLoading(true);
    try {
      const quizData = await callGeminiAPI(topic || `general ${learningData.subject} concepts`);
      
      try {
        const parsedQuiz = JSON.parse(quizData);
        if (parsedQuiz.error) {
          toast.error('Failed to generate quiz question');
          return;
        }
        setCurrentQuiz(parsedQuiz);
        setShowQuizAnswer(false);
        setSelectedAnswer(null);
        toast.success('New quiz question generated by ARIA!');
      } catch (parseError) {
        toast.error('Failed to parse quiz data');
      }
    } catch (error) {
      toast.error('Failed to generate quiz question');
    } finally {
      setIsLoading(false);
    }
  };

  const handleQuizAnswer = (answerIndex: number) => {
    setSelectedAnswer(answerIndex);
    setShowQuizAnswer(true);
  };

  const daysUntilExam = Math.ceil((learningData.examDate.getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24));

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 to-blue-50 dark:from-gray-900 dark:to-gray-800 p-4">
      <div className="max-w-7xl mx-auto">
        <div className="flex justify-between items-center mb-6">
          <div>
            <h1 className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-2">
              ü§ñ AI Learning Assistant
            </h1>
            <p className="text-gray-600 dark:text-gray-300">
              Welcome {username}, let's master your {learningData.subject} with ARIA
            </p>
          </div>
          <ThemeToggle />
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 h-[calc(100vh-200px)]">
          {/* Robot Teacher Interface */}
          <div className="lg:col-span-2 flex flex-col">
            <RobotTeacher 
              username={username}
              learningData={learningData}
              onQuizRequest={generateQuiz}
            />
          </div>

          {/* AI Quiz Section */}
          <div className="flex flex-col space-y-4">
            <Card className="bg-gradient-to-br from-green-50 to-blue-50 dark:from-green-900/20 dark:to-blue-900/20 border-green-200 dark:border-green-800">
              <CardHeader>
                <CardTitle className="text-lg flex items-center gap-2">
                  <Target className="h-5 w-5 text-green-600" />
                  ü§ñ ARIA Quiz Generator
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <Button 
                  onClick={() => generateQuiz()}
                  disabled={isLoading}
                  className="w-full bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700"
                >
                  {isLoading ? 'GENERATING...' : '‚ö° Generate New Question'}
                </Button>
                
                {currentQuiz && (
                  <div className="space-y-3">
                    <div className="p-3 bg-gradient-to-r from-blue-100 to-purple-100 dark:from-blue-900/30 dark:to-purple-900/30 rounded-lg border">
                      <p className="font-medium text-sm break-words">{currentQuiz.question}</p>
                    </div>
                    
                    <div className="space-y-2">
                      {currentQuiz.options.map((option, index) => (
                        <Button
                          key={index}
                          variant={
                            showQuizAnswer
                              ? index === currentQuiz.correctAnswer
                                ? "default"
                                : selectedAnswer === index
                                ? "destructive"
                                : "outline"
                              : "outline"
                          }
                          className="w-full text-left justify-start text-xs p-3 h-auto"
                          onClick={() => !showQuizAnswer && handleQuizAnswer(index)}
                          disabled={showQuizAnswer}
                        >
                          <div className="break-words">
                            {String.fromCharCode(65 + index)}. {option}
                          </div>
                        </Button>
                      ))}
                    </div>
                    
                    {showQuizAnswer && (
                      <div className="p-3 bg-gradient-to-r from-green-100 to-blue-100 dark:from-green-900/30 dark:to-blue-900/30 rounded-lg border">
                        <p className="text-sm font-medium text-green-800 dark:text-green-200">
                          ü§ñ ARIA Explains:
                        </p>
                        <p className="text-xs text-green-700 dark:text-green-300 mt-1 break-words">
                          {currentQuiz.explanation}
                        </p>
                      </div>
                    )}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Study Info & Timer Panel */}
          <div className="space-y-4 overflow-y-auto">
            <Card className="bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 border-purple-200 dark:border-purple-800">
              <CardHeader>
                <CardTitle className="text-lg flex items-center gap-2">
                  <Clock className="h-5 w-5 text-purple-600" />
                  ‚è∞ Study Timer
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="text-center">
                  <div className="text-3xl font-mono font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent">
                    {formatTime(studyTime)}
                  </div>
                </div>
                <div className="flex gap-2">
                  <Button 
                    onClick={toggleTimer} 
                    variant="outline" 
                    size="sm"
                    className="flex-1 bg-gradient-to-r from-purple-100 to-blue-100 dark:from-purple-900/50 dark:to-blue-900/50"
                  >
                    {isTimerRunning ? <Pause className="h-4 w-4" /> : <Play className="h-4 w-4" />}
                  </Button>
                  <Button 
                    onClick={resetTimer} 
                    variant="outline" 
                    size="sm"
                    className="bg-gradient-to-r from-red-100 to-pink-100 dark:from-red-900/50 dark:to-pink-900/50"
                  >
                    <RotateCcw className="h-4 w-4" />
                  </Button>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-gradient-to-br from-blue-50 to-cyan-50 dark:from-blue-900/20 dark:to-cyan-900/20 border-blue-200 dark:border-blue-800">
              <CardHeader>
                <CardTitle className="text-lg">üìä Mission Data</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="text-center">
                  <div className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-cyan-600 bg-clip-text text-transparent">{daysUntilExam}</div>
                  <div className="text-sm text-gray-600 dark:text-gray-400">Days Until Target</div>
                </div>
                <div className="space-y-2">
                  <div className="flex justify-between text-sm">
                    <span>Target Date:</span>
                    <span className="font-medium">{learningData.examDate.toLocaleDateString()}</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span>Subject:</span>
                    <span className="font-medium">{learningData.subject}</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span>Level:</span>
                    <span className="font-medium">{learningData.className}</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AILearningInterface;
